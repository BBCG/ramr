for (file.name in tcga.samples.descr$full_file_name) {
tcga.sample <- read.delim(file.name, header=TRUE, stringsAsFactors=FALSE, check.names=FALSE, comment.char="")
if (nrow(tcga.data)==0) {
tcga.data <- tcga.sample[,c(id.columns)]
}
tcga.data <- merge(tcga.data, tcga.sample[,c(id.columns,"Beta_value"),drop=FALSE], by=id.columns, all=TRUE)
colnames(tcga.data)[ncol(tcga.data)] <- tcga.samples.descr[tcga.samples.descr$full_file_name==file.name,"Barcode"]
}
save(tcga.data, file=tcga.data.file)
dim(tcga.data)
dim(na.omit(tcga.data))
# make ranges
all.barcodes <- c(all.normal.barcodes, all.cancer.barcodes)
length(all.barcodes)
dim(tcga.data[grep("^cg",tcga.data$`Composite Element REF`),c("Composite Element REF","Chromosome","Start","End",all.barcodes)])
dim(tcga.data[rowSums(!is.na(tcga.data))>=length(all.barcodes)/2,])
tcga.data <- tcga.data[grep("^cg",tcga.data$`Composite Element REF`),c("Composite Element REF","Chromosome","Start","End",all.barcodes)]
tcga.data <- tcga.data[rowSums(!is.na(tcga.data))>=length(all.barcodes)/2,]
rownames(tcga.data) <- tcga.data$`Composite Element REF`
tcga.data.ranges    <- makeGRangesFromDataFrame(tcga.data, seqnames.field="Chromosome", start.field="Start", end.field="End", keep.extra.columns=TRUE)
tcga.data.ranges
dim(tcga.data.ranges)
length(tcga.data.ranges)
# clean
tcga.data.ranges <- tcga.data.ranges[!(names(tcga.data.ranges) %in% to.remove)]
tcga.data.ranges <- tcga.data.ranges[!(seqnames(tcga.data.ranges) %in% c("chrX","chrY"))]
length(tcga.data.ranges)
# load black and african-american IDs
black.data <- read.delim(paste0(work.dir,"explore-case-table.2020-10-15-black-african-american.tsv"), stringsAsFactors=FALSE)
# load TNBC IDs
tnbc.data <- read.delim(paste0(work.dir,"journal.pone.0157368.s008.tsv"), stringsAsFactors=FALSE)
# shall we plot...
all.black.cancer.barcodes    <- grep(paste(paste0("^",black.data$Case.ID),collapse="|"), all.cancer.barcodes, value=TRUE)
all.black.cancer.barcodes
all.nonblack.cancer.barcodes <- setdiff(all.cancer.barcodes, all.black.cancer.barcodes)
length(all.nonblack.cancer.barcodes)
length(all.black.cancer.barcodes)
159+637
brca1.range <- as("chr17:41196312-41277500","GRanges")
brca1.range
findOverlaps(brca1.range, tcga.data.ranges)
findOverlaps(brca1.range, tcga.data.ranges, maxgap=5000)
brca1.range <- as("chr17:43044295-43125364","GRanges") #41196312-41277500
findOverlaps(brca1.range, tcga.data.ranges, maxgap=5000)
tcga.data.ranges[subjectHits(findOverlaps(brca1.range, tcga.data.ranges, maxgap=5000))]
plot.ranges <- tcga.data.ranges[subjectHits(findOverlaps(brca1.range, tcga.data.ranges, maxgap=10000))]
plot.ranges
granges(plot.ranges)
sort(granges(plot.ranges))
plot.ranges <- sort(tcga.data.ranges[subjectHits(findOverlaps(brca1.range, tcga.data.ranges, maxgap=10000))])
plotRAMR <- function (data.ranges,
data.samples,
ramr.ranges,
highlight=NULL,
window=300)
{
ramr.ranges.reduced  <- reduce(ramr.ranges, min.gapwidth=window, with.revmap=TRUE)
ramr.ranges.relisted <- relist(ramr.ranges[unlist(ramr.ranges.reduced$revmap)], ramr.ranges.reduced$revmap)
plot.list <- list()
for (i in 1:length(ramr.ranges.relisted)) {
plot.ranges <- unlist(ramr.ranges.relisted[i])
revmap.rows <- unique(unlist(plot.ranges$revmap))
data.hits   <- unique(queryHits(findOverlaps(data.ranges, plot.ranges, maxgap=window, ignore.strand=TRUE)))
if (length(data.hits)>0) {
plot.data   <- data.frame(data.ranges[data.hits, data.samples], check.names=FALSE, stringsAsFactors=FALSE)
colnames(plot.data) <- c(colnames(plot.data)[1:5], data.samples)
plot.data$median <- matrixStats::rowMedians(as.matrix(plot.data[,data.samples]), na.rm=TRUE)
if (is.null(highlight))
highlight <- unique(plot.ranges$sample)
colorify       <- c("median",highlight)
plot.data.melt <- melt(plot.data, id.vars=c("seqnames","start","end","width","strand"),
variable.name="sample", value.name="beta")
plot.data.melt <- cbind(plot.data.melt, list(alpha=0.5,color=factor("lightgrey",levels=c("lightgrey",colorify))))
plot.data.melt[plot.data.melt$sample %in% colorify, "alpha"] <- 0.9
for (sample.name in colorify)
plot.data.melt[plot.data.melt$sample==sample.name,"color"] <- sample.name
gene.plot <- ggplot(plot.data.melt, aes_string(x="start", y="beta", group="sample", color="color", alpha="alpha")) +
geom_line(size=0.5) +
geom_point(size=1) +
scale_x_continuous(name="position") +
scale_y_continuous(name="beta value", limits=c(-0, 1), breaks=c(0, 0.25, 0.5, 0.75, 1)) +
scale_color_discrete(name="samples", limits=colorify) +
scale_alpha_continuous(guide="none") +
theme(legend.text=element_text(size=8), #legend.position="none", legend.title=element_blank(),
axis.text.x=element_text(size=8, angle=0), #, color=.data.cpgs.colors),
axis.text.y=element_text(size=8)) +
ggtitle(as.character(reduce(plot.ranges)))
# print(gene.plot)
plot.list[length(plot.list)+1] <- list(gene.plot)
}
}
return(plot.list)
}
# plotRAMR <- function (data.ranges,
#                       data.samples,
#                       ramr.ranges,
#                       window=300,
#                       title=NULL)
# {
#   ramr.ranges.reduced  <- reduce(ramr.ranges, with.revmap=TRUE)
#   ramr.ranges.relisted <- relist(ramr.ranges[unlist(ramr.ranges.reduced$revmap)], ramr.ranges.reduced$revmap)
#
#   for (i in 1:length(ramr.ranges.relisted)) {
#     plot.ranges <- unlist(ramr.ranges.relisted[i])
#     revmap.rows <- unique(unlist(plot.ranges$revmap))
#     data.hits   <- unique(queryHits(findOverlaps(data.ranges, plot.ranges, maxgap=window, ignore.strand=TRUE)))
#     plot.data   <- data.frame(data.ranges[data.hits, data.samples], check.names=FALSE, stringsAsFactors=FALSE)
#     colnames(plot.data) <- c(colnames(plot.data)[1:5], data.samples)
#     plot.data$median <- matrixStats::rowMedians(as.matrix(plot.data[,data.samples]), na.rm=TRUE)
#
#     colorify       <- c("median",unique(plot.ranges$sample))
#     plot.data.melt <- melt(plot.data, id.vars=c("seqnames","start","end","width","strand"),
#                            variable.name="sample", value.name="beta")
#     plot.data.melt <- cbind(plot.data.melt, list(alpha=0.5,color=factor("lightgrey",levels=c("lightgrey",colorify))))
#
#     plot.data.melt[plot.data.melt$sample %in% colorify, "alpha"] <- 0.9
#     for (sample.name in colorify)
#       plot.data.melt[plot.data.melt$sample==sample.name,"color"] <- sample.name
#
#     gene.plot <- ggplot(plot.data.melt, aes(x=start, y=beta, group=sample, color=color, alpha=alpha)) +
#       geom_line(size=0.5) +
#       geom_point(size=1) +
#       # scale_x_discrete(limits=revmap.rows) +
#       scale_x_continuous(name="position") +
#       scale_y_continuous(name="beta value", limits=c(-0, 1), breaks=c(0, 0.25, 0.5, 0.75, 1)) +
#       scale_color_discrete(name="samples", limits=colorify) +
#       scale_alpha_continuous(guide="none") +
#       theme(legend.text=element_text(size=8), #legend.position="none", legend.title=element_blank(),
#             axis.text.x=element_text(size=8, angle=0), #, color=.data.cpgs.colors),
#             axis.text.y=element_text(size=8)) +
#       ggtitle( ifelse( !is.null(title), title, as.character(reduce(plot.ranges)) ) )
#
#     print(gene.plot)
#   }
# }
plotRAMR(plot.ranges,all.black.cancer.barcodes)
plotRAMR(plot.ranges, all.black.cancer.barcodes, brca1.range)
brca1.range
brca1.range <- as("chr17:43069000-43126607","GRanges")
plot.ranges <- sort(tcga.data.ranges[subjectHits(findOverlaps(brca1.range, tcga.data.ranges, maxgap=0))])
plot.ranges
sort(granges(plot.ranges))
brca1.range <- as("chr17:43125000-43126607","GRanges")
plot.ranges <- sort(tcga.data.ranges[subjectHits(findOverlaps(brca1.range, tcga.data.ranges, maxgap=0))])
sort(granges(plot.ranges))
plotRAMR(plot.ranges, all.black.cancer.barcodes, brca1.range)
plotRAMR(plot.ranges, all.nonblack.cancer.barcodes, brca1.range)
plotRAMR <- function (data.ranges,
data.samples,
ramr.ranges,
highlight=NULL,
window=300,
title=NULL)
{
ramr.ranges.reduced  <- reduce(ramr.ranges, min.gapwidth=window, with.revmap=TRUE)
ramr.ranges.relisted <- relist(ramr.ranges[unlist(ramr.ranges.reduced$revmap)], ramr.ranges.reduced$revmap)
plot.list <- list()
for (i in 1:length(ramr.ranges.relisted)) {
plot.ranges <- unlist(ramr.ranges.relisted[i])
revmap.rows <- unique(unlist(plot.ranges$revmap))
data.hits   <- unique(queryHits(findOverlaps(data.ranges, plot.ranges, maxgap=window, ignore.strand=TRUE)))
if (length(data.hits)>0) {
plot.data   <- data.frame(data.ranges[data.hits, data.samples], check.names=FALSE, stringsAsFactors=FALSE)
colnames(plot.data) <- c(colnames(plot.data)[1:5], data.samples)
plot.data$median <- matrixStats::rowMedians(as.matrix(plot.data[,data.samples]), na.rm=TRUE)
if (is.null(title))
title <- as.character(reduce(plot.ranges))
if (is.null(highlight))
highlight <- unique(plot.ranges$sample)
colorify       <- c("median",highlight)
plot.data.melt <- melt(plot.data, id.vars=c("seqnames","start","end","width","strand"),
variable.name="sample", value.name="beta")
plot.data.melt <- cbind(plot.data.melt, list(alpha=0.5,color=factor("lightgrey",levels=c("lightgrey",colorify))))
plot.data.melt[plot.data.melt$sample %in% colorify, "alpha"] <- 0.9
for (sample.name in colorify)
plot.data.melt[plot.data.melt$sample==sample.name,"color"] <- sample.name
gene.plot <- ggplot(plot.data.melt, aes_string(x="start", y="beta", group="sample", color="color", alpha="alpha")) +
geom_line(size=0.5) +
geom_point(size=1) +
scale_x_continuous(name="position") +
scale_y_continuous(name="beta value", limits=c(-0, 1), breaks=c(0, 0.25, 0.5, 0.75, 1)) +
scale_color_discrete(name="samples", limits=colorify) +
scale_alpha_continuous(guide="none") +
theme(legend.text=element_text(size=8), #legend.position="none", legend.title=element_blank(),
axis.text.x=element_text(size=8, angle=0), #, color=.data.cpgs.colors),
axis.text.y=element_text(size=8)) +
ggtitle(title)
# print(gene.plot)
plot.list[length(plot.list)+1] <- list(gene.plot)
}
}
return(plot.list)
}
# plotRAMR <- function (data.ranges,
#                       data.samples,
#                       ramr.ranges,
#                       window=300,
#                       title=NULL)
# {
#   ramr.ranges.reduced  <- reduce(ramr.ranges, with.revmap=TRUE)
#   ramr.ranges.relisted <- relist(ramr.ranges[unlist(ramr.ranges.reduced$revmap)], ramr.ranges.reduced$revmap)
#
#   for (i in 1:length(ramr.ranges.relisted)) {
#     plot.ranges <- unlist(ramr.ranges.relisted[i])
#     revmap.rows <- unique(unlist(plot.ranges$revmap))
#     data.hits   <- unique(queryHits(findOverlaps(data.ranges, plot.ranges, maxgap=window, ignore.strand=TRUE)))
#     plot.data   <- data.frame(data.ranges[data.hits, data.samples], check.names=FALSE, stringsAsFactors=FALSE)
#     colnames(plot.data) <- c(colnames(plot.data)[1:5], data.samples)
#     plot.data$median <- matrixStats::rowMedians(as.matrix(plot.data[,data.samples]), na.rm=TRUE)
#
#     colorify       <- c("median",unique(plot.ranges$sample))
#     plot.data.melt <- melt(plot.data, id.vars=c("seqnames","start","end","width","strand"),
#                            variable.name="sample", value.name="beta")
#     plot.data.melt <- cbind(plot.data.melt, list(alpha=0.5,color=factor("lightgrey",levels=c("lightgrey",colorify))))
#
#     plot.data.melt[plot.data.melt$sample %in% colorify, "alpha"] <- 0.9
#     for (sample.name in colorify)
#       plot.data.melt[plot.data.melt$sample==sample.name,"color"] <- sample.name
#
#     gene.plot <- ggplot(plot.data.melt, aes(x=start, y=beta, group=sample, color=color, alpha=alpha)) +
#       geom_line(size=0.5) +
#       geom_point(size=1) +
#       # scale_x_discrete(limits=revmap.rows) +
#       scale_x_continuous(name="position") +
#       scale_y_continuous(name="beta value", limits=c(-0, 1), breaks=c(0, 0.25, 0.5, 0.75, 1)) +
#       scale_color_discrete(name="samples", limits=colorify) +
#       scale_alpha_continuous(guide="none") +
#       theme(legend.text=element_text(size=8), #legend.position="none", legend.title=element_blank(),
#             axis.text.x=element_text(size=8, angle=0), #, color=.data.cpgs.colors),
#             axis.text.y=element_text(size=8)) +
#       ggtitle( ifelse( !is.null(title), title, as.character(reduce(plot.ranges)) ) )
#
#     print(gene.plot)
#   }
# }
plotRAMR(plot.ranges, all.black.cancer.barcodes, brca1.range, title="black")
plotRAMR(plot.ranges, all.nonblack.cancer.barcodes, brca1.range, title="non-black")
brca1.range <- as("chr17:43124000-43126607","GRanges")
plot.ranges <- sort(tcga.data.ranges[subjectHits(findOverlaps(brca1.range, tcga.data.ranges, maxgap=0))])
plotRAMR(plot.ranges, all.black.cancer.barcodes, brca1.range, title="black")
brca1.range <- as("chr17:43123000-43126607","GRanges")
plot.ranges <- sort(tcga.data.ranges[subjectHits(findOverlaps(brca1.range, tcga.data.ranges, maxgap=0))])
plotRAMR(plot.ranges, all.black.cancer.barcodes, brca1.range, title="black")
brca1.range <- as("chr17:43121000-43126607","GRanges")
plot.ranges <- sort(tcga.data.ranges[subjectHits(findOverlaps(brca1.range, tcga.data.ranges, maxgap=0))])
plotRAMR(plot.ranges, all.black.cancer.barcodes, brca1.range, title="black")
brca1.range <- as("chr17:43120000-43126607","GRanges")
plot.ranges <- sort(tcga.data.ranges[subjectHits(findOverlaps(brca1.range, tcga.data.ranges, maxgap=0))])
plotRAMR(plot.ranges, all.black.cancer.barcodes, brca1.range, title="black")
brca1.range <- as("chr17:43125000-43126607","GRanges")
plot.ranges <- sort(tcga.data.ranges[subjectHits(findOverlaps(brca1.range, tcga.data.ranges, maxgap=0))])
plotRAMR(plot.ranges, all.black.cancer.barcodes, brca1.range, title="black")
brca1.range <- as("chr17:43125000-43126000","GRanges")
plotRAMR(plot.ranges, all.black.cancer.barcodes, brca1.range, title="black")
plotRAMR(plot.ranges, all.black.cancer.barcodes, brca1.range, window=0, title="black")
plotRAMR(plot.ranges, all.nonblack.cancer.barcodes, brca1.range, window=0, title="non-black")
plotRAMR(plot.ranges, all.black.cancer.barcodes, brca1.range, window=0, title=paste0("black, n=",length(all.black.cancer.barcodes)))
plotRAMR(plot.ranges, all.nonblack.cancer.barcodes, brca1.range, window=0, title=paste0("non-black, n=",length(all.nonblack.cancer.barcodes)))
head(tnbc.data)
tnbc.data[tnbc.data$TNBC=="YES","BARCODE"]
all.black.tnbc.barcodes      <- grep(paste(paste0("^",tnbc.data[tnbc.data$TNBC=="YES","BARCODE"]),collapse="|"), all.cancer.barcodes, value=TRUE)
tnbc.cancer.barcodes         <- grep(paste(paste0("^",tnbc.data[tnbc.data$TNBC=="YES","BARCODE"]),collapse="|"), all.cancer.barcodes, value=TRUE)
length(tnbc.cancer.barcodes)
grep(paste(paste0("^",tnbc.data[tnbc.data$TNBC=="YES","BARCODE"]),collapse="|"), all.cancer.barcodes, value=TRUE)
all.black.tnbc.cancer.barcodes    <- intersect(all.black.cancer.barcodes, tnbc.cancer.barcodes)
all.black.tnbc.cancer.barcodes
all.black.cancer.barcodes         <- grep(paste(paste0("^",black.data$Case.ID),collapse="|"), all.cancer.barcodes, value=TRUE)
all.nonblack.cancer.barcodes      <- setdiff(all.cancer.barcodes, all.black.cancer.barcodes)
tnbc.cancer.barcodes              <- grep(paste(paste0("^",tnbc.data[tnbc.data$TNBC=="YES","BARCODE"]),collapse="|"), all.cancer.barcodes, value=TRUE)
all.black.tnbc.cancer.barcodes    <- intersect(all.black.cancer.barcodes, tnbc.cancer.barcodes)
all.nonblack.tnbc.cancer.barcodes <- setdiff(tnbc.cancer.barcodes, all.black.tnbc.cancer.barcodes)
all.black.tnbc.cancer.barcodes
all.nonblack.tnbc.cancer.barcodes
plotRAMR(plot.ranges, all.black.tnbc.cancer.barcodes, brca1.range, window=0, title=paste0("black TNBC, n=",length(all.black.tnbc.cancer.barcodes)))
plotRAMR(plot.ranges, all.nonblack.tnbc.cancer.barcodes, brca1.range, window=0, title=paste0("non-black TNBC, n=",length(all.nonblack.tnbc.cancer.barcodes)))
getUniverse <- function (data.ranges,
merge.window=300,
min.cpgs=7)
{
if (class(data.ranges)!="GRanges")
stop("'data.ranges' must be be a GRanges object")
universe.ranges      <- reduce(data.ranges, min.gapwidth=merge.window, with.revmap=TRUE)
if (length(universe.ranges)>0) {
universe.ranges$ncpg <- unlist(lapply(universe.ranges$revmap, length))
universe.ranges      <- subset(universe.ranges, ncpg>=min.cpgs & width>2)
}
return(universe.ranges)
}
getRAMR <- function (data.ranges,
data.samples,
ramr.method="IQR",
iqr.cutoff=5,
pval.cutoff=5e-2,
qval.cutoff=NULL,
merge.window=300,
min.cpgs=7,
min.width=NULL,
exclude.range=NULL, #c(0.3,0.7)
cores=max(1,detectCores()-1),
...)
{
if (class(data.ranges)!="GRanges")
stop("'data.ranges' must be be a GRanges object")
if (!all(data.samples %in% colnames(mcols(data.ranges))))
stop("'data.ranges' metadata must include 'data.samples'")
if (length(data.samples)<3)
stop("at least three 'data.samples' must be provided")
#####################################################################################
getPValues.beta <- function(data.chunk, ...){
chunk.filt  <- apply(data.chunk, 1, function(x){
x.median    <- median(x, na.rm=TRUE)
x[is.na(x)] <- x.median
# x.pvals <- tryCatch(
#   {
#     beta.fit <- suppressWarnings( EnvStats::ebeta(as.numeric(x), ...) )
#     pvals    <- pbeta(x, beta.fit$parameters[1], beta.fit$parameters[2])
#     pvals[x>x.median] <- 1 - pvals[x>x.median]
#     pvals
#   },
#   error   = function (e) {
#     return(rep(1, length(x)))
#   }
# )
# return(x.pvals)
beta.fit <- suppressWarnings( EnvStats::ebeta(as.numeric(x), ...) )
pvals    <- pbeta(x, beta.fit$parameters[1], beta.fit$parameters[2])
pvals[x>x.median] <- 1 - pvals[x>x.median]
return(pvals)
})
return(t(chunk.filt))
}
getPValues.wbeta<- function(data.chunk, ...){
chunk.filt  <- apply(data.chunk, 1, function(x){
x.median    <- median(x, na.rm=TRUE)
x[is.na(x)] <- x.median
# # weight: bin contents
#   c           <- cut(x, c(0:100)/100)
#   b           <- table(c)
#   w           <- as.numeric(b[c])
# # weight: distance from median
#   w           <- (1 - abs(x-x.median))**3
# weight: bin contents and distance
c           <- cut(x, c(0:100)/100)
b           <- table(c)
w           <- as.numeric(b[c]) * (1 - abs(x-x.median))
beta.fit    <- suppressWarnings( ExtDist::eBeta(as.numeric(x), w, ...) )
pvals       <- pBeta(x, params=beta.fit)
pvals[x>x.median] <- 1 - pvals[x>x.median]
return(pvals)
})
return(t(chunk.filt))
}
getPValues.logn <- function(data.chunk, ...){
chunk.filt  <- apply(data.chunk, 1, function(x){
x.quantiles <- quantile(x, na.rm=TRUE)
x[is.na(x)] <- x.quantiles[3]
logn.fit    <- suppressWarnings( logitnorm::twCoefLogitnorm(x.quantiles[3], x.quantiles[4], perc=0.75, ...) )
pvals       <- plogitnorm(x, logn.fit[1], logn.fit[2])
pvals[x>x.quantiles[3]] <- 1 - pvals[x>x.quantiles[3]]
return(pvals)
})
return(t(chunk.filt))
}
#####################################################################################
registerDoParallel(cores)
cl <- makeCluster(cores)
# TODO: all multicore                 - DONE (almost)
# TODO: tile window                   -
# TODO: distributions for outliers    - DONE (beta & logitnorm, but maybe try other skew-normal such as fGarch::snormFit)
universe      <- getUniverse(data.ranges, merge.window=merge.window, min.cpgs=min.cpgs)
universe.cpgs <- unlist(universe$revmap)
betas   <- as.matrix(mcols(data.ranges)[universe.cpgs,data.samples,drop=FALSE])
if (is.null(qval.cutoff))
qval.cutoff <- pval.cutoff/nrow(betas)
# names(dimnames(betas)) <- c("cpg", "sample")
chunks <- split(1:nrow(betas), cut(1:nrow(betas),cores))
medians <- foreach (chunk=chunks, .combine=c) %dopar% matrixStats::rowMedians(betas[chunk,], na.rm=TRUE)
if (!is.null(exclude.range))
medians[medians %between% exclude.range] <- NA
if (ramr.method=="IQR") {
iqrs <- foreach (chunk=chunks, .combine=c) %dopar% matrixStats::rowIQRs(betas[chunk,], na.rm=TRUE)
betas.filtered <- (betas-medians)/iqrs
betas.filtered[abs(betas.filtered)<iqr.cutoff]  <- NA
} else if (ramr.method=="beta") {
# multi-threaded EnvStats::ebeta (speed: mme=mmue>mle>>>fitdistrplus::fitdist)
betas.filtered <- foreach (chunk=chunks) %dopar% getPValues.beta(betas[chunk,], ...)
betas.filtered <- do.call(rbind, betas.filtered)
betas.filtered[betas.filtered>=qval.cutoff] <- NA
} else if (ramr.method=="wbeta") {
betas.filtered <- foreach (chunk=chunks) %dopar% getPValues.wbeta(betas[chunk,], ...)
betas.filtered <- do.call(rbind, betas.filtered)
betas.filtered[betas.filtered>=qval.cutoff] <- NA
} else if (ramr.method=="logn") {
warning("logit-normal ramr.method doesn't work really...")
# multi-threaded logitnorm::twCoefLogitnorm
betas.filtered <- foreach (chunk=chunks) %dopar% getPValues.logn(betas[chunk,], ...)
betas.filtered <- do.call(rbind, betas.filtered)
betas.filtered[betas.filtered>=qval.cutoff] <- NA
} else {
stop("unknown 'ramr.method'")
}
getMergedRanges <- function (column) {
not.na        <- which(!is.na(betas.filtered[,column]))
ranges        <- GenomicRanges::reduce(data.ranges[universe.cpgs[not.na]], min.gapwidth=merge.window, with.revmap=TRUE)
if (length(ranges)>0) {
ranges$ncpg   <- unlist(lapply(ranges$revmap, length))
ranges$sample <- column
ranges        <- subset(ranges, ncpg>=min.cpgs & width>=max(3,min.width))
ranges$dbeta  <- sapply(ranges$revmap, function (revmap) {
mean(betas[not.na[revmap],column,drop=FALSE] - medians[not.na[revmap]])
})
if (ramr.method=="IQR") {
ranges$xiqr   <- sapply(ranges$revmap, function (revmap) {
mean(betas.filtered[not.na[revmap],column,drop=FALSE], na.rm=TRUE)
})
# } else {
#   ranges$xiqr   <- sapply(ranges$revmap, function (revmap) {
#     xiqrs <- (betas[not.na[revmap],column,drop=FALSE] - medians[not.na[revmap]]) / matrixStats::rowIQRs(betas[not.na[revmap],,drop=FALSE], na.rm=TRUE)
#     mean(xiqrs)
#   })
}
if (ramr.method=="beta") {
ranges$pval <- sapply(ranges$revmap, function (revmap) {
return( 10**mean(log10(betas.filtered[not.na[revmap],column] + .Machine$double.xmin), na.rm=TRUE) )
})
# } else {
#   ranges$pval.beta <- sapply(ranges$revmap, function (revmap) {
#     range.pvals <- getPValues.beta(betas[not.na[revmap],,drop=FALSE], ...)
#     range.pvals[range.pvals==0] <- .Machine$double.xmin
#     return( 10**mean(log10(range.pvals[,column]), na.rm=TRUE) )
#   })
}
if (ramr.method=="wbeta") {
ranges$pval <- sapply(ranges$revmap, function (revmap) {
return( 10**mean(log10(betas.filtered[not.na[revmap],column] + .Machine$double.xmin), na.rm=TRUE) )
})
# } else {
#   ranges$pval.wbeta <- sapply(ranges$revmap, function (revmap) {
#     range.pvals <- getPValues.beta(betas[not.na[revmap],,drop=FALSE], ...)
#     range.pvals[range.pvals==0] <- .Machine$double.xmin
#     return( 10**mean(log10(range.pvals[,column]), na.rm=TRUE) )
#   })
}
if (ramr.method=="logn") {
ranges$pval <- sapply(ranges$revmap, function (revmap) {
return( 10**mean(log10(betas.filtered[not.na[revmap],column] + .Machine$double.xmin), na.rm=TRUE) )
})
# } else {
#   ranges$pval.logn <- sapply(ranges$revmap, function (revmap) {
#     range.pvals <- getPValues.logn(betas[not.na[revmap],,drop=FALSE], ...)
#     range.pvals[range.pvals==0] <- .Machine$double.xmin
#     return( 10**mean(log10(range.pvals[,column]), na.rm=TRUE) )
#   })
}
ranges$revmap <- lapply(ranges$revmap, function (i) {universe.cpgs[not.na[i]]})
}
return(ranges)
}
amr.ranges <- foreach (column=colnames(betas.filtered)) %dopar% getMergedRanges(column)
stopCluster(cl)
return(unlist(as(amr.ranges, "GRangesList")))
}
plotRAMR(tcga.data.ranges, all.black.cancer.barcodes, brca1.range, window=0, title=paste0("black, n=",length(all.black.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.nonblack.cancer.barcodes, brca1.range, window=0, title=paste0("non-black, n=",length(all.nonblack.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.black.tnbc.cancer.barcodes, brca1.range, window=0, title=paste0("black TNBC, n=",length(all.black.tnbc.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.nonblack.tnbc.cancer.barcodes, brca1.range, window=0, title=paste0("non-black TNBC, n=",length(all.nonblack.tnbc.cancer.barcodes)))
getRAMR(plot.ranges,all.cancer.barcodes)
getRAMR(plot.ranges, all.cancer.barcodes, ramr.method="beta", pval.cutoff=1e-3)
brca1.range <- as("chr17:43125000-43126000","GRanges")
plot.ranges <- sort(tcga.data.ranges[subjectHits(findOverlaps(brca1.range, tcga.data.ranges, maxgap=0))])
amrs <- getRAMR(plot.ranges,all.cancer.barcodes)
plotRAMR(tcga.data.ranges, all.black.cancer.barcodes, amrs, window=0, title=paste0("black, n=",length(all.black.cancer.barcodes)))
amrs
amrs[amrs$sample %in% all.black.cancer.barcodes]
amrs[amrs$sample %in% all.nonblack.cancer.barcodes]
amrs[amrs$sample %in% all.black.tnbc.cancer.barcodes]
amrs[amrs$sample %in% all.nonblack.tnbc.cancer.barcodes]
plotRAMR(tcga.data.ranges, all.black.cancer.barcodes, amrs[amrs$sample %in% all.black.cancer.barcodes],
window=0, title=paste0("black, n=",length(all.black.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.nonblack.cancer.barcodes, amrs[amrs$sample %in% all.nonblack.cancer.barcodes],
window=0, title=paste0("non-black, n=",length(all.nonblack.cancer.barcodes)))
amrs <- getRAMR(plot.ranges, all.cancer.barcodes, ramr.method="beta", qval.cutoff=1e-3)
amrs
plotRAMR(tcga.data.ranges, all.black.cancer.barcodes, amrs[amrs$sample %in% all.black.cancer.barcodes],
window=0, title=paste0("black, n=",length(all.black.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.nonblack.cancer.barcodes, amrs[amrs$sample %in% all.nonblack.cancer.barcodes],
window=0, title=paste0("non-black, n=",length(all.nonblack.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.black.tnbc.cancer.barcodes, amrs[amrs$sample %in% all.black.tnbc.cancer.barcodes],
window=0, title=paste0("black TNBC, n=",length(all.black.tnbc.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.nonblack.tnbc.cancer.barcodes, amrs[amrs$sample %in% all.nonblack.tnbc.cancer.barcodes],
window=0, title=paste0("non-black TNBC, n=",length(all.nonblack.tnbc.cancer.barcodes)))
amrs <- getRAMR(plot.ranges, all.cancer.barcodes, ramr.method="beta", qval.cutoff=5e-2)
amrs
plotRAMR(tcga.data.ranges, all.black.cancer.barcodes, amrs[amrs$sample %in% all.black.cancer.barcodes],
window=0, title=paste0("black, n=",length(all.black.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.nonblack.cancer.barcodes, amrs[amrs$sample %in% all.nonblack.cancer.barcodes],
window=0, title=paste0("non-black, n=",length(all.nonblack.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.black.tnbc.cancer.barcodes, amrs[amrs$sample %in% all.black.tnbc.cancer.barcodes],
window=0, title=paste0("black TNBC, n=",length(all.black.tnbc.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.nonblack.tnbc.cancer.barcodes, amrs[amrs$sample %in% all.nonblack.tnbc.cancer.barcodes],
window=0, title=paste0("non-black TNBC, n=",length(all.nonblack.tnbc.cancer.barcodes)))
paste0(work.dir,"plots.pdf")
pdf(file=paste0(work.dir,"plots.pdf"), height=8.27, width=11.69)
plotRAMR(tcga.data.ranges, all.black.cancer.barcodes, amrs[amrs$sample %in% all.black.cancer.barcodes],
window=0, title=paste0("black, n=",length(all.black.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.nonblack.cancer.barcodes, amrs[amrs$sample %in% all.nonblack.cancer.barcodes],
window=0, title=paste0("non-black, n=",length(all.nonblack.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.black.tnbc.cancer.barcodes, amrs[amrs$sample %in% all.black.tnbc.cancer.barcodes],
window=0, title=paste0("black TNBC, n=",length(all.black.tnbc.cancer.barcodes)))
plotRAMR(tcga.data.ranges, all.nonblack.tnbc.cancer.barcodes, amrs[amrs$sample %in% all.nonblack.tnbc.cancer.barcodes],
window=0, title=paste0("non-black TNBC, n=",length(all.nonblack.tnbc.cancer.barcodes)))
dev.off()
