sessionInfo()
sessionInfo()
tempdir()
tempdir()
tempdir()
tempdir()
typeof(c())
typeof(c(1))
character()
sessionInfo()
library(GenomicRanges)
library(doParallel)
library(matrixStats)
library(data.table)
library(ggplot2)
library(EnvStats)
library(ExtDist)
sessionInfo()
document()
library(roxygen2)
document()
library(devtools)
document()
data(ramr)
data(ramr)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
library(devtools)
devtools::check()
devtools::check()
ramr.tp.unique
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique)
devtools::check()
devtools::check()
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique)
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique)
devtools::check()
devtools::check()
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique)
do.call("grid.arrange", c(plotRAMR(ramr.data, ramr.samples, ramr.tp.nonunique), ncol=2))
do.call("grid.arrange", c(plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique), ncol=2))
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique[1])
plotAMR(ramr.data, ramr.samples, ramr.tp.unique[1])
ramr.tp.unique
devtools::check()
getAMR()
getUniverse(ramr.data)
getUniverse(ramr.data,min.cpgs=1)
ramr.data
length(ramr.data)
getUniverse(ramr.data,min.cpgs=1,merge.window=1)
getUniverse(ramr.data,min.cpgs=1,merge.window=2)
GenomicRanges::reduce(data.ranges, min.gapwidth=merge.window, with.revmap=TRUE)
GenomicRanges::reduce(ramr.data, min.gapwidth=1, with.revmap=TRUE)
z <- GenomicRanges::reduce(ramr.data, min.gapwidth=1, with.revmap=TRUE)
z$ncpg <- unlist(lapply(z$revmap, length))
z
subset(z, `ncpg`>=1 & `width`>=max(1,1))
getUniverse(ramr.data,min.cpgs=1,merge.window=1)
width(ramr.data[1])
ramr.data[1]
width(z[1])
devtools::check()
devtools::check()
devtools::check()
GenomicRanges::queryHits()
S4Vectors::queryHits()
devtools::check()
universe <- getUniverse(ramr.data, min.cpgs=5, merge.window=1000)
amrs <- getAMR(ramr.data, ramr.samples, ramr.method="beta", min.cpgs=5, merge.window=1000, qval.cutoff=1e-3)
library(LOLA)
hg19.extdb  <- loadRegionDB(system.file("LOLAExt",  "hg19", package="LOLA"))
runLOLA(amrs, universe, hg19.extdb, cores=1, redefineUserSets=TRUE)
devtools::check()
data(ramr)
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique[4], highlight=c("sample7","sample8","sample9"))
ramr.tp.nonunique[4]
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique[4])
plotAMR(ramr.data, ramr.samples, ramr.tp.unique[1])
ramr.tp.unique
plotAMR(ramr.data, ramr.samples, ramr.tp.unique[1:2])
devtools::check()
plotAMR(ramr.data, ramr.samples, ramr.tp.unique[1])
x  <- GenomicRanges::reduce(ramr.tp.unique[1], min.gapwidth=300, with.revmap=TRUE)
y <- utils::relist(ramr.tp.unique[1][unlist(x$revmap)], x$revmap)
y
length(y)
unlist(y)
unlist(y[1])
GenomicRanges::unlist(y[1])
y[1]
devtools::check()
y
plotAMR(ramr.data, ramr.samples, ramr.tp.unique[1])
plotAMR(ramr.data, ramr.samples, ramr.tp.unique)
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique)
ramr.tp.nonunique
x
ramr.ranges.reduced  <- GenomicRanges::reduce(ramr.tp.nonunique, min.gapwidth=300, with.revmap=TRUE)
ramr.ranges.reduced
ramr.ranges.relisted <- utils::relist(ramr.tp.nonunique[unlist(ramr.ranges.reduced$revmap)], ramr.ranges.reduced$revmap)
ramr.ranges.relisted
ramr.ranges.relisted <- relist(ramr.tp.nonunique[unlist(ramr.ranges.reduced$revmap)], ramr.ranges.reduced$revmap)
ramr.ranges.relisted
relist(ramr.tp.nonunique[unlist(ramr.ranges.reduced$revmap)], ramr.ranges.reduced$revmap)
devtools::check()
devtools::check()
plotAMR(ramr.data, ramr.samples, ramr.tp.unique[1])
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique[1])
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique[c(1,11)])
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique)
BiocGenerics::relist()
devtools::check()
plotAMR(ramr.data, ramr.samples, ramr.tp.unique[1])
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique[1])
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique[1:5])
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique, title="custom")
ramr.tp.nonunique
ramr.ranges.reduced  <- GenomicRanges::reduce(ramr.tp.nonunique, min.gapwidth=300, with.revmap=TRUE)
ramr.ranges.relisted <- BiocGenerics::relist(ramr.tp.nonunique[unlist(ramr.ranges.reduced$revmap)], ramr.ranges.reduced$revmap)
ramr.ranges.relisted
plot.ranges <- unlist(ramr.ranges.relisted[1])
plot.ranges
revmap.rows <- unique(unlist(plot.ranges$revmap))
revmap.rows
c("median", ifelse(is.null(highlight), unique(plot.ranges$sample), highlight))
c("median", ifelse(is.null(NULL), unique(plot.ranges$sample), NULL))
unique(plot.ranges$sample)
c("median", ifelse(is.null(NULL), c(unique(plot.ranges$sample)), NULL))
c("median", c(ifelse(is.null(NULL), c(unique(plot.ranges$sample)), NULL)))
c("median", c(ifelse2(is.null(NULL), c(unique(plot.ranges$sample)), NULL)))
ifelse2(is.null(NULL), c(unique(plot.ranges$sample)), NULL)
unique(plot.ranges$sample)
unlist(unique(plot.ranges$sample))
ifelse(is.null(NULL), c(unique(plot.ranges$sample)), NULL)
ifelse(is.null(NULL), unlist(unique(plot.ranges$sample)), NULL)
ifelse(is.null(NULL), list(unique(plot.ranges$sample)), NULL)
c(ifelse(is.null(NULL), list(unique(plot.ranges$sample)), NULL))
c("", ifelse(is.null(NULL), list(unique(plot.ranges$sample)), NULL))
c("", if(is.null(NULL) unique(plot.ranges$sample), NULL))
c("", if(is.null(NULL)) unique(plot.ranges$sample), NULL))
c("", if(is.null(NULL)) {unique(plot.ranges$sample)}, NULL)
c("", if(is.null(NULL)) unique(plot.ranges$sample), NULL)
c("wre", if(is.null(NULL)) unique(plot.ranges$sample), NULL)
c("wre", if(!is.null(NULL)) unique(plot.ranges$sample), NULL)
devtools::check()
devtools::check()
plotAMR(ramr.data, ramr.samples, ramr.tp.unique[1])
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique[1])
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique)
plotAMR(ramr.data, ramr.samples, ramr.tp.nonunique, highlight = "sample78")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
data(ramr)
getAMR(ramr.data, ramr.samples, ramr.method="beta", min.cpgs=5,
merge.window=1000, qval.cutoff=1e-3)
getAMR(ramr.data, ramr.samples, ramr.method="beta", min.cpgs=5,
merge.window=1000, qval.cutoff=1e-3, cores=1)
cut(1:10,1)
?cut
split(1:4, cut(1:4,2))
cut(1:4,2)
foreach(i=1:3) %do% sqrt(i)
foreach(i=1:3) %dopar% sqrt(i)
foreach(i=1:3, combine=c) %dopar% sqrt(i)
foreach(i=1:3, .combine=c) %dopar% sqrt(i)
split(1:4, cut(1:4,2))
cut(1:4,2)
split(1:4, 1)
ifelse(TRUE, cut(1:4,2), 1)
ifelse(FALSE, cut(1:4,2), 1)
ifelse(FALSE, cut(1:4,2), 2)
ifelse(TRUE, cut(1:4,2), 2)
if(TRUE) cut(1:4,2)
if(TRUE) {cut(1:4,2)} else 2
if(F) {cut(1:4,2)} else 2
split(1:4, cut(1:4,2))
split(1:4)
split(1:4,1)
if(1==1) {cut(1:4,2)} else 2
if(1==1) cut(1:4,2) else 2
if(1==2) cut(1:4,2) else 2
split(1:10, if (1>1) cut(1:10,5) else 1)
split(1:10, if (2>1) cut(1:10,5) else 1)
devtools::check()
getAMR(ramr.data, ramr.samples, ramr.method="beta", min.cpgs=5,
#'                  merge.window=1000, qval.cutoff=1e-3)
getAMR(ramr.data, ramr.samples, ramr.method="beta", min.cpgs=5, merge.window=1000, qval.cutoff=1e-3)
getAMR(ramr.data, ramr.samples, ramr.method="beta", min.cpgs=5, merge.window=1000, qval.cutoff=1e-3, cores=1)
sort(getAMR(ramr.data, ramr.samples, ramr.method="beta", min.cpgs=5, merge.window=1000, qval.cutoff=1e-3, cores=1))
c(ramr.tp.unique, ramr.tp.nonunique)
sort(c(ramr.tp.unique, ramr.tp.nonunique))
devtools::check()
doParallel::registerDoParallel(1)
cl <- parallel::makeCluster(1)
parallel::stopCluster(cl)
cl <- parallel::makeCluster(10)
parallel::stopCluster(cl)
cl <- parallel::makeCluster(1)
parallel::stopCluster(cl)
parallel::detectCores()
getUniverse(ramr.data, min.cpgs=5, merge.window=1000)
getUniverse(ramr.data, min.cpgs=1, merge.window=1000)
getUniverse(ramr.data, min.cpgs=1, merge.window=1)
length(ramr.data)
getUniverse(ramr.data, min.cpgs=10, merge.window=1000)
width( getUniverse(ramr.data, min.cpgs=10, merge.window=1000) )
width( getUniverse(ramr.data, min.cpgs=10, merge.window=1000) ) > 1000
all(width( getUniverse(ramr.data, min.cpgs=10, merge.window=1000) ) > 1000)
all(width( getUniverse(ramr.data, min.cpgs=10, merge.window=1000) ) > 5000)
width( getUniverse(ramr.data, min.cpgs=10, merge.window=1000) ) > 5000
data(ramr)
library(minfi)
library(GEOquery)
library(GenomicRanges)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
# destination for temporary files
dest.dir <- tempdir()
# SOFT file
geo.soft <- getGEO(GEO="GSE51032", GSEMatrix=FALSE, destdir=dest.dir)
library(minfi)
library(GEOquery)
library(GenomicRanges)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
# destination for temporary files
dest.dir <- tempdir()
dest.dir
# downloading and unpacking raw IDAT files
suppl.files <- getGEOSuppFiles("GSE51032", baseDir=dest.dir, makeDirectory=FALSE, filter_regex="RAW")
untar(paste(dest.dir, suppl.files$fname, sep="/"))
suppl.files$fname
suppl.files
names(suppl.files)
rownames(suppl.files)
untar(paste(dest.dir, rownames(suppl.files), sep="/"))
untar(rownames(suppl.files))
rownames(suppl.files)
rownames(suppl.files)
untar(rownames(suppl.files), verbose=TRUE)
untar(rownames(suppl.files), exdir=dest.dir, verbose=TRUE)
# reading IDAT files
geo.idat <- read.metharray.exp(dest.dir)
idat.files  <- list.files(dest.dir, pattern="idat.gz$", full.names=TRUE)
idat.files
sapply(idat.files, gunzip, overwrite=TRUE)
# reading IDAT files
geo.idat <- read.metharray.exp(dest.dir)
colnames(geo.idat)
colnames(geo.idat) <- gsub("(GSM\\d+).*", "\\1", colnames(geo.idat))
# processing raw data
genomic.ratio.set <- preprocessQuantile(geo.idat, mergeManifest=TRUE, fixOutliers=TRUE)
# creating the GRanges object with beta values
data.ranges <- granges(genomic.ratio.set)
data.betas  <- getBeta(genomic.ratio.set)
sample.ids  <- colnames(geo.idat)
mcols(data.ranges) <- data.betas
